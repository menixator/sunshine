let config = require("../lib/config");

let formatter = require("../lib/formatter");
let log = formatter("sunshine:www");

try {
  config.fromEnv();
} catch (err) {
  if (process.env.DEBUG && process.env.DEBUG.match(/sunshine:.*/)) {
    log`configuration couldn't be parsed due to err: ${err}`;
  } else {
    console.error(
      `configuration couldn't be parsed due to err: ${err.message}`
    );
  }
  // Graceful exit
  process.exitCode = 1;
}


let { app, http, iface, mediator } = require("../lib/server");

iface
  .login()
  .then(() => {
    let port = config.get("port");

    let host = config.get("host");

    log`trying to start the server at: ${`http://${host}:${port}`}`;
    http.listen(port, host, function(err) {
      if (err) {
        return log`couldn\'t start server at ${`http://${host}:${port}`} due to err: ${err}`;
      }
      let addr = http.address();
      log`server listening at: ${`http://${addr.address}:${addr.port}`}`;
    });
  })
  .catch(err => {
    log`an error occured: ${err}`;
  });

let quit = async code => {
  if (quit.running) {
    return false;
  }
  quit.running = true;
  log`exiting. ${code}`;
  mediator.destroy();
  try {
    await iface.logout();
  } catch (err) {
    log`an error occured while trying to log out.`;
    process.exit(1);
  }
  process.exit(0);
};

quit.running = false;

process.on("beforeExit", quit);

process.on("SIGINT", () => {
  quit("SIGINT");
});

process.on("unhandledRejection", (reason, p) => {
  console.error(reason);
});
